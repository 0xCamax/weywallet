"use strict";
// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const version_1 = require("../../version");
/**
 * Event is a report of an event somewhere in the cluster. It generally denotes some state
 * change in the system.
 */
class Event extends pulumi.CustomResource {
    /**
     * Create a events.v1beta1.Event resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let inputs = {};
        inputs["action"] = args && args.action || undefined;
        inputs["apiVersion"] = "events.k8s.io/v1beta1";
        inputs["deprecatedCount"] = args && args.deprecatedCount || undefined;
        inputs["deprecatedFirstTimestamp"] = args && args.deprecatedFirstTimestamp || undefined;
        inputs["deprecatedLastTimestamp"] = args && args.deprecatedLastTimestamp || undefined;
        inputs["deprecatedSource"] = args && args.deprecatedSource || undefined;
        inputs["eventTime"] = args && args.eventTime || undefined;
        inputs["kind"] = "Event";
        inputs["metadata"] = args && args.metadata || undefined;
        inputs["note"] = args && args.note || undefined;
        inputs["reason"] = args && args.reason || undefined;
        inputs["regarding"] = args && args.regarding || undefined;
        inputs["related"] = args && args.related || undefined;
        inputs["reportingController"] = args && args.reportingController || undefined;
        inputs["reportingInstance"] = args && args.reportingInstance || undefined;
        inputs["series"] = args && args.series || undefined;
        inputs["type"] = args && args.type || undefined;
        if (!opts) {
            opts = {};
        }
        if (!opts.version) {
            opts.version = version_1.getVersion();
        }
        super(Event.__pulumiType, name, inputs, opts);
    }
    /**
     * Get the state of an existing `Event` resource, as identified by `id`.
     * Typically this ID  is of the form <namespace>/<name>; if <namespace> is omitted, then (per
     * Kubernetes convention) the ID becomes default/<name>.
     *
     * Pulumi will keep track of this resource using `name` as the Pulumi ID.
     *
     * @param name _Unique_ name used to register this resource with Pulumi.
     * @param id An ID for the Kubernetes resource to retrieve. Takes the form
     *  <namespace>/<name> or <name>.
     * @param opts Uniquely specifies a CustomResource to select.
     */
    static get(name, id, opts) {
        return new Event(name, undefined, Object.assign({}, opts, { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Event.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj["__pulumiType"] === Event.__pulumiType;
    }
}
/** @internal */
Event.__pulumiType = "kubernetes:events.k8s.io/v1beta1:Event";
exports.Event = Event;
