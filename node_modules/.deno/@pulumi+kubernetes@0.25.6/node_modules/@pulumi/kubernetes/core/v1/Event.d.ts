import * as pulumi from "@pulumi/pulumi";
import * as inputApi from "../../types/input";
import * as outputApi from "../../types/output";
/**
 * Event is a report of an event somewhere in the cluster.
 */
export declare class Event extends pulumi.CustomResource {
    /**
     * What action was taken/failed regarding to the Regarding object.
     */
    readonly action: pulumi.Output<string>;
    /**
     * APIVersion defines the versioned schema of this representation of an object. Servers should
     * convert recognized schemas to the latest internal value, and may reject unrecognized
     * values. More info:
     * https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
     */
    readonly apiVersion: pulumi.Output<"v1">;
    /**
     * The number of times this event has occurred.
     */
    readonly count: pulumi.Output<number>;
    /**
     * Time when this Event was first observed.
     */
    readonly eventTime: pulumi.Output<string>;
    /**
     * The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
     */
    readonly firstTimestamp: pulumi.Output<string>;
    /**
     * The object that this event is about.
     */
    readonly involvedObject: pulumi.Output<outputApi.core.v1.ObjectReference>;
    /**
     * Kind is a string value representing the REST resource this object represents. Servers may
     * infer this from the endpoint the client submits requests to. Cannot be updated. In
     * CamelCase. More info:
     * https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
     */
    readonly kind: pulumi.Output<"Event">;
    /**
     * The time at which the most recent occurrence of this event was recorded.
     */
    readonly lastTimestamp: pulumi.Output<string>;
    /**
     * A human-readable description of the status of this operation.
     */
    readonly message: pulumi.Output<string>;
    /**
     * Standard object's metadata. More info:
     * https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
     */
    readonly metadata: pulumi.Output<outputApi.meta.v1.ObjectMeta>;
    /**
     * This should be a short, machine understandable string that gives the reason for the
     * transition into the object's current status.
     */
    readonly reason: pulumi.Output<string>;
    /**
     * Optional secondary object for more complex actions.
     */
    readonly related: pulumi.Output<outputApi.core.v1.ObjectReference>;
    /**
     * Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
     */
    readonly reportingComponent: pulumi.Output<string>;
    /**
     * ID of the controller instance, e.g. `kubelet-xyzf`.
     */
    readonly reportingInstance: pulumi.Output<string>;
    /**
     * Data about the Event series this event represents or nil if it's a singleton Event.
     */
    readonly series: pulumi.Output<outputApi.core.v1.EventSeries>;
    /**
     * The component reporting this event. Should be a short machine understandable string.
     */
    readonly source: pulumi.Output<outputApi.core.v1.EventSource>;
    /**
     * Type of this event (Normal, Warning), new types could be added in the future
     */
    readonly type: pulumi.Output<string>;
    /**
     * Get the state of an existing `Event` resource, as identified by `id`.
     * Typically this ID  is of the form <namespace>/<name>; if <namespace> is omitted, then (per
     * Kubernetes convention) the ID becomes default/<name>.
     *
     * Pulumi will keep track of this resource using `name` as the Pulumi ID.
     *
     * @param name _Unique_ name used to register this resource with Pulumi.
     * @param id An ID for the Kubernetes resource to retrieve. Takes the form
     *  <namespace>/<name> or <name>.
     * @param opts Uniquely specifies a CustomResource to select.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Event;
    /**
     * Returns true if the given object is an instance of Event.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Event;
    /**
     * Create a core.v1.Event resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: inputApi.core.v1.Event, opts?: pulumi.CustomResourceOptions);
}
