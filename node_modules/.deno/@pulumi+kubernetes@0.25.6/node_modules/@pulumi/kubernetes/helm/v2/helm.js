"use strict";
// Copyright 2016-2019, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const child_process_1 = require("child_process");
const fs = require("fs");
const jsyaml = require("js-yaml");
const nodepath = require("path");
const shell = require("shell-quote");
const tmp = require("tmp");
const path = require("../../path");
const yaml = require("../../yaml/index");
function isChartOpts(o) {
    return "chart" in o;
}
function isLocalChartOpts(o) {
    return "path" in o;
}
/**
 * Chart is a component representing a collection of resources described by an arbitrary Helm
 * Chart. The Chart can be fetched from any source that is accessible to the `helm` command
 * line. Values in the `values.yml` file can be overridden using `ChartOpts.values` (equivalent
 * to `--set` or having multiple `values.yml` files). Objects can be transformed arbitrarily by
 * supplying callbacks to `ChartOpts.transformations`.
 *
 * `Chart` does not use Tiller. The Chart specified is copied and expanded locally; any values
 * that would be retrieved in-cluster would be assigned fake values, and none of Tiller's
 * server-side validity testing is executed.
 *
 * The semantics of `update` on a Chart are identical to those of Helm and kubectl; for example,
 * unlike a "normal" Pulumi program, updating a ConfigMap does not trigger a cascading update
 * among Deployments that reference it.
 *
 * NOTE: `Chart` will attempt to sort the resources in the same way that Helm does, to ensure
 * that (e.g.) namespaces are created before things that are in them. But, because the Pulumi
 * engine delivers the these calls asynchronously, they could arrive "somewhat" out of order.
 * This should not affect many Helm charts.
 */
class Chart extends yaml.CollectionComponentResource {
    /**
     * Create an instance of the specified Helm chart.
     * @param releaseName Name of the Chart (e.g., nginx-ingress).
     * @param config Configuration options for the Chart.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(releaseName, config, opts) {
        if (config.resourcePrefix !== undefined) {
            releaseName = `${config.resourcePrefix}-${releaseName}`;
        }
        super("kubernetes:helm.sh/v2:Chart", releaseName, config, opts);
        const allConfig = pulumi.output(config);
        const configDeps = Array.from(allConfig.resources());
        allConfig.isKnown.then((isKnown) => {
            if (!isKnown) {
                // Note that this can only happen during a preview.
                pulumi.log.info("[Can't preview] all chart values must be known ahead of time to generate an accurate preview.", this);
            }
        });
        this.resources = allConfig.apply(cfg => {
            // Create temporary directories and files to hold chart data and override values.
            const overrides = tmp.fileSync({ postfix: ".yaml" });
            const chartDir = tmp.dirSync({ unsafeCleanup: true });
            try {
                let chart;
                let defaultValues;
                if (isChartOpts(cfg)) {
                    // Fetch chart.
                    const chartToFetch = cfg.repo ? `${cfg.repo}/${cfg.chart}` : cfg.chart;
                    const fetchOpts = Object.assign({}, cfg.fetchOpts, {
                        destination: chartDir.name,
                        version: cfg.version
                    });
                    fetch(chartToFetch, fetchOpts);
                    const fetchedChartName = fs.readdirSync(chartDir.name)[0];
                    chart = path.quotePath(nodepath.join(chartDir.name, fetchedChartName));
                    defaultValues = path.quotePath(nodepath.join(chartDir.name, fetchedChartName, "values.yaml"));
                }
                else {
                    chart = path.quotePath(cfg.path);
                    defaultValues = path.quotePath(nodepath.join(chart, "values.yaml"));
                }
                // Write overrides file.
                const data = JSON.stringify(cfg.values || {}, undefined, "  ");
                fs.writeFileSync(overrides.name, data);
                // Does not require Tiller. From the `helm template` documentation:
                //
                // >  Render chart templates locally and display the output.
                // >
                // > This does not require Tiller. However, any values that would normally be
                // > looked up or retrieved in-cluster will be faked locally. Additionally, none
                // > of the server-side testing of chart validity (e.g. whether an API is supported)
                // > is done.
                const release = shell.quote([releaseName]);
                const values = path.quotePath(overrides.name);
                const namespaceArg = cfg.namespace
                    ? `--namespace ${shell.quote([cfg.namespace])}`
                    : "";
                const yamlStream = child_process_1.execSync(`helm template ${chart} --name ${release} --values ${defaultValues} --values ${values} ${namespaceArg}`).toString();
                return this.parseTemplate(yamlStream, cfg.transformations, cfg.resourcePrefix, configDeps);
            }
            catch (e) {
                // Shed stack trace, only emit the error.
                throw new pulumi.RunError(e.toString());
            }
            finally {
                // Clean up temporary files and directories.
                chartDir.removeCallback();
                overrides.removeCallback();
            }
        });
    }
    parseTemplate(yamlStream, transformations, resourcePrefix, dependsOn) {
        // NOTE: We must manually split the YAML stream because of js-yaml#456. Perusing the code
        // and the spec, it looks like a YAML stream is delimited by `^---`, though it is difficult
        // to know for sure.
        //
        // NOTE: We use `{json: true, schema: jsyaml.CORE_SCHEMA}` here so that we conform to Helm's
        // YAML parsing semantics. Specifically, `json: true` to ensure that a duplicate key
        // overrides its predecessory, rather than throwing an exception, and `schema:
        // jsyaml.CORE_SCHEMA` to avoid using additional YAML parsing rules not supported by the
        // YAML parser used by Kubernetes.
        const objs = yamlStream.split(/^---/m)
            .map(yaml => jsyaml.safeLoad(yaml, { json: true, schema: jsyaml.CORE_SCHEMA }))
            .filter(a => a != null && "kind" in a)
            .sort(helmSort);
        return yaml.parse({
            resourcePrefix: resourcePrefix,
            yaml: objs.map(o => jsyaml.safeDump(o)),
            transformations: transformations || [],
        }, { parent: this, dependsOn: dependsOn });
    }
}
exports.Chart = Chart;
// helmSort is a JavaScript implementation of the Helm Kind sorter[1]. It provides a
// best-effort topology of Kubernetes kinds, which in most cases should ensure that resources
// that must be created first, are.
//
// [1]: https://github.com/helm/helm/blob/094b97ab5d7e2f6eda6d0ab0f2ede9cf578c003c/pkg/tiller/kind_sorter.go
/** @ignore */ function helmSort(a, b) {
    const installOrder = [
        "Namespace",
        "ResourceQuota",
        "LimitRange",
        "PodSecurityPolicy",
        "Secret",
        "ConfigMap",
        "StorageClass",
        "PersistentVolume",
        "PersistentVolumeClaim",
        "ServiceAccount",
        "CustomResourceDefinition",
        "ClusterRole",
        "ClusterRoleBinding",
        "Role",
        "RoleBinding",
        "Service",
        "DaemonSet",
        "Pod",
        "ReplicationController",
        "ReplicaSet",
        "Deployment",
        "StatefulSet",
        "Job",
        "CronJob",
        "Ingress",
        "APIService"
    ];
    const ordering = {};
    installOrder.forEach((_, i) => {
        ordering[installOrder[i]] = i;
    });
    const aKind = a["kind"];
    const bKind = b["kind"];
    if (!(aKind in ordering) && !(bKind in ordering)) {
        return aKind.localeCompare(bKind);
    }
    if (!(aKind in ordering)) {
        return 1;
    }
    if (!(bKind in ordering)) {
        return -1;
    }
    return ordering[aKind] - ordering[bKind];
}
exports.helmSort = helmSort;
/**
 * Retrieve a package from a package repository, and download it locally.
 *
 * This is useful for fetching packages to inspect, modify, or repackage. It can also be used to
 * perform cryptographic verification of a chart without installing the chart.
 *
 * There are options for unpacking the chart after download. This will create a directory for the
 * chart and uncompress into that directory.
 *
 * If the `verify` option is specified, the requested chart MUST have a provenance file, and MUST
 * pass the verification process. Failure in any part of this will result in an error, and the chart
 * will not be saved locally.
 */
function fetch(chart, opts) {
    const flags = [];
    if (opts !== undefined) {
        // Untar by default.
        if (opts.untar !== false) {
            flags.push(`--untar`);
        }
        // For arguments that are not paths to files, it is sufficent to use shell.quote to quote the arguments.
        // However, for arguments that are actual paths to files we use path.quotePath (note that path here is
        // not the node path builtin module). This ensures proper escaping of paths on Windows.
        if (opts.version !== undefined) {
            flags.push(`--version ${shell.quote([opts.version])}`);
        }
        if (opts.caFile !== undefined) {
            flags.push(`--ca-file ${path.quotePath(opts.caFile)}`);
        }
        if (opts.certFile !== undefined) {
            flags.push(`--cert-file ${path.quotePath(opts.certFile)}`);
        }
        if (opts.keyFile !== undefined) {
            flags.push(`--key-file ${path.quotePath(opts.keyFile)}`);
        }
        if (opts.destination !== undefined) {
            flags.push(`--destination ${path.quotePath(opts.destination)}`);
        }
        if (opts.keyring !== undefined) {
            flags.push(`--keyring ${path.quotePath(opts.keyring)}`);
        }
        if (opts.password !== undefined) {
            flags.push(`--password ${shell.quote([opts.password])}`);
        }
        if (opts.repo !== undefined) {
            flags.push(`--repo ${path.quotePath(opts.repo)}`);
        }
        if (opts.untardir !== undefined) {
            flags.push(`--untardir ${path.quotePath(opts.untardir)}`);
        }
        if (opts.username !== undefined) {
            flags.push(`--username ${shell.quote([opts.username])}`);
        }
        if (opts.home !== undefined) {
            flags.push(`--home ${path.quotePath(opts.home)}`);
        }
        if (opts.devel === true) {
            flags.push(`--devel`);
        }
        if (opts.prov === true) {
            flags.push(`--prov`);
        }
        if (opts.verify === true) {
            flags.push(`--verify`);
        }
    }
    child_process_1.execSync(`helm fetch ${shell.quote([chart])} ${flags.join(" ")}`);
}
exports.fetch = fetch;
