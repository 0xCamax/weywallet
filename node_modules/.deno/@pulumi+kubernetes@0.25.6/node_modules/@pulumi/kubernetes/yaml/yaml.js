"use strict";
// *** WARNING: this file was generated by the Pulumi Kubernetes codegen tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const fs = require("fs");
const glob = require("glob");
const node_fetch_1 = require("node-fetch");
const k8s = require("../index");
function yamlLoadAll(text) {
    // NOTE[pulumi-kubernetes#501]: Use `loadAll` with `JSON_SCHEMA` here instead of
    // `safeLoadAll` because the latter is incompatible with `JSON_SCHEMA`. It is
    // important to use `JSON_SCHEMA` here because the fields of the Kubernetes core
    // API types are all tagged with `json:`, and they don't deal very well with things
    // like dates.
    const jsyaml = require("js-yaml");
    return jsyaml.loadAll(text, undefined, { schema: jsyaml.JSON_SCHEMA });
}
/** @ignore */ function parse(config, opts) {
    let resources = pulumi.output({});
    if (config.files !== undefined) {
        let files = [];
        if (typeof config.files === 'string') {
            if (isUrl(config.files)) {
                files = [config.files];
            }
            else {
                files = glob.sync(config.files);
            }
        }
        else {
            for (const file of config.files) {
                if (isUrl(file)) {
                    files.push(file);
                }
                else {
                    files.push(...glob.sync(file));
                }
            }
        }
        for (const file of files) {
            const cf = new ConfigFile(file, {
                file: file,
                transformations: config.transformations,
                resourcePrefix: config.resourcePrefix
            }, opts);
            resources = pulumi.all([resources, cf.resources]).apply(([rs, cfrs]) => (Object.assign({}, rs, cfrs)));
        }
    }
    if (config.yaml !== undefined) {
        let yamlTexts = [];
        if (typeof config.yaml === 'string') {
            yamlTexts.push(config.yaml);
        }
        else {
            yamlTexts.push(...config.yaml);
        }
        for (const text of yamlTexts) {
            const docResources = parseYamlDocument({
                objs: yamlLoadAll(text),
                transformations: config.transformations,
                resourcePrefix: config.resourcePrefix
            }, opts);
            resources = pulumi.all([resources, docResources]).apply(([rs, drs]) => (Object.assign({}, rs, drs)));
        }
    }
    if (config.objs !== undefined) {
        const objs = Array.isArray(config.objs) ? config.objs : [config.objs];
        const docResources = parseYamlDocument({ objs: objs, transformations: config.transformations }, opts);
        resources = pulumi.all([resources, docResources]).apply(([rs, drs]) => (Object.assign({}, rs, drs)));
    }
    return resources;
}
exports.parse = parse;
class CollectionComponentResource extends pulumi.ComponentResource {
    constructor(resourceType, name, config, opts) {
        super(resourceType, name, config, opts);
    }
    getResource(groupVersionKind, namespaceOrName, name) {
        return this.getResourceImpl(groupVersionKind, namespaceOrName, name);
    }
    getResourceProperty(groupVersionKind, namespaceOrName, nameOrProperty, property) {
        const name = property !== undefined ? nameOrProperty : undefined;
        return this.getResourceImpl(groupVersionKind, namespaceOrName, name)
            .apply(r => r[property || nameOrProperty]);
    }
    getCustomResource(groupVersionKind, namespaceOrName, name) {
        return this.getResourceImpl(groupVersionKind, namespaceOrName, name);
    }
    getResourceImpl(groupVersionKind, namespaceOrName, name) {
        // `id` will either be `${name}` or `${namespace}/${name}`.
        let id = namespaceOrName;
        if (name !== undefined) {
            id = `${namespaceOrName}/${name}`;
        }
        return this.resources.apply(r => r[`${groupVersionKind}::${id}`]);
    }
}
exports.CollectionComponentResource = CollectionComponentResource;
/**
 * ConfigGroup creates a set of Kubernetes resources from Kubernetes YAML text. The YAML text
 * may be supplied using any of the following `ConfigGroupOpts`:
 *
 *   1. Using a filename or a list of filenames:
 *        a. `{files: "foo.yaml"}`
 *        b. `{files: ["foo.yaml", "bar.yaml"]}`
 *   2. Using a file pattern or a list of file patterns:
 *        a. `{files: "*.yaml"}`
 *        b. `{files: ["foo/*.yaml", "bar/*.yaml"]}`
 *   3. Using a literal string containing YAML, or a list of such strings:
 *        a. `{yaml: "(LITERAL YAML HERE)"}`
 *        b. `{yaml: ["(LITERAL YAML HERE)", "(MORE YAML)"]}`
 *   4. Any combination of files, patterns, or YAML strings:
 *        a. `{files: "foo.yaml", yaml: "(LITERAL YAML HERE)"}`
 */
class ConfigGroup extends CollectionComponentResource {
    constructor(name, config, opts) {
        super("kubernetes:yaml:ConfigGroup", name, config, opts);
        this.resources = parse(config, { parent: this });
    }
}
exports.ConfigGroup = ConfigGroup;
/**
 * ConfigFile creates a set of Kubernetes resources from Kubernetes YAML file. If `config.name`
 * is not specified, `ConfigFile` assumes the argument `name` is the filename.
 */
class ConfigFile extends CollectionComponentResource {
    constructor(name, config, opts) {
        if (config && config.resourcePrefix !== undefined) {
            name = `${config.resourcePrefix}-${name}`;
        }
        super("kubernetes:yaml:ConfigFile", name, config, opts);
        const fileId = config && config.file || name;
        let text;
        if (isUrl(fileId)) {
            text = node_fetch_1.default(fileId).then(r => {
                if (r.ok) {
                    return r.text();
                }
                else {
                    throw Error(`Error fetching YAML file '${fileId}': ${r.status} ${r.statusText}`);
                }
            });
        }
        else {
            text = Promise.resolve(fs.readFileSync(fileId).toString());
        }
        this.resources = pulumi.output(text.then(t => {
            try {
                return parseYamlDocument({
                    objs: yamlLoadAll(t),
                    transformations: config && config.transformations || [],
                    resourcePrefix: config && config.resourcePrefix || undefined
                }, { parent: this });
            }
            catch (e) {
                throw Error(`Error fetching YAML file '${fileId}': ${e}`);
            }
        }));
    }
}
exports.ConfigFile = ConfigFile;
/** @ignore */ function isUrl(s) {
    return s.startsWith("http://") || s.startsWith("https://");
}
/** @ignore */ function parseYamlDocument(config, opts) {
    const objs = [];
    for (const obj of config.objs) {
        const fileObjects = parseYamlObject(obj, config.transformations, config.resourcePrefix, opts);
        for (const fileObject of fileObjects) {
            objs.push(fileObject);
        }
    }
    return pulumi.all(objs).apply(xs => {
        let resources = {};
        for (const x of xs) {
            resources[x.name] = x.resource;
        }
        return resources;
    });
}
/** @ignore */ function parseYamlObject(obj, transformations, resourcePrefix, opts) {
    if (obj == null || Object.keys(obj).length == 0) {
        return [];
    }
    // Create a copy of opts to pass into potentially mutating transforms that will be applied to this resource.
    opts = Object.assign({}, opts);
    // Allow users to change API objects before any validation.
    for (const t of transformations || []) {
        t(obj, opts);
    }
    if (!("kind" in obj && "apiVersion" in obj)) {
        throw new Error(`Kubernetes resources require a kind and apiVersion: ${JSON.stringify(obj)}`);
    }
    const kind = obj["kind"];
    const apiVersion = obj["apiVersion"];
    // Recursively traverse built-in Kubernetes list types into a single set of "naked" resource
    // definitions that we can register with the Pulumi engine.
    //
    // Kubernetes does not instantiate list types like `v1.List`. When the API server receives
    // a list, it will recursively traverse it and perform the necessary operations on the
    // each "instantiable" resource it finds. For example, `kubectl apply` on a
    // `v1.ConfigMapList` will cause the API server to traverse the list, and `apply` each
    // `v1.ConfigMap` it finds.
    //
    // Since Kubernetes does not instantiate list types directly, Pulumi also traverses lists
    // for resource definitions that can be managed by Kubernetes, and registers those with the
    // engine instead.
    if ((apiVersion == "v1" && kind == "List")
        || (apiVersion == "admissionregistration.k8s.io/v1beta1" && kind == "MutatingWebhookConfigurationList")
        || (apiVersion == "admissionregistration.k8s.io/v1beta1" && kind == "ValidatingWebhookConfigurationList")
        || (apiVersion == "apiextensions.k8s.io/v1beta1" && kind == "CustomResourceDefinitionList")
        || (apiVersion == "apiregistration.k8s.io/v1" && kind == "APIServiceList")
        || (apiVersion == "apiregistration/v1" && kind == "APIServiceList")
        || (apiVersion == "apiregistration.k8s.io/v1beta1" && kind == "APIServiceList")
        || (apiVersion == "apiregistration/v1beta1" && kind == "APIServiceList")
        || (apiVersion == "apps/v1" && kind == "ControllerRevisionList")
        || (apiVersion == "apps/v1" && kind == "DaemonSetList")
        || (apiVersion == "apps/v1" && kind == "DeploymentList")
        || (apiVersion == "apps/v1" && kind == "ReplicaSetList")
        || (apiVersion == "apps/v1" && kind == "StatefulSetList")
        || (apiVersion == "apps/v1beta1" && kind == "ControllerRevisionList")
        || (apiVersion == "apps/v1beta1" && kind == "DeploymentList")
        || (apiVersion == "apps/v1beta1" && kind == "StatefulSetList")
        || (apiVersion == "apps/v1beta2" && kind == "ControllerRevisionList")
        || (apiVersion == "apps/v1beta2" && kind == "DaemonSetList")
        || (apiVersion == "apps/v1beta2" && kind == "DeploymentList")
        || (apiVersion == "apps/v1beta2" && kind == "ReplicaSetList")
        || (apiVersion == "apps/v1beta2" && kind == "StatefulSetList")
        || (apiVersion == "auditregistration.k8s.io/v1alpha1" && kind == "AuditSinkList")
        || (apiVersion == "autoscaling/v1" && kind == "HorizontalPodAutoscalerList")
        || (apiVersion == "autoscaling/v2beta1" && kind == "HorizontalPodAutoscalerList")
        || (apiVersion == "autoscaling/v2beta2" && kind == "HorizontalPodAutoscalerList")
        || (apiVersion == "batch/v1" && kind == "JobList")
        || (apiVersion == "batch/v1beta1" && kind == "CronJobList")
        || (apiVersion == "batch/v2alpha1" && kind == "CronJobList")
        || (apiVersion == "certificates.k8s.io/v1beta1" && kind == "CertificateSigningRequestList")
        || (apiVersion == "coordination.k8s.io/v1" && kind == "LeaseList")
        || (apiVersion == "coordination.k8s.io/v1beta1" && kind == "LeaseList")
        || (apiVersion == "v1" && kind == "ComponentStatusList")
        || (apiVersion == "v1" && kind == "ConfigMapList")
        || (apiVersion == "v1" && kind == "EndpointsList")
        || (apiVersion == "v1" && kind == "EventList")
        || (apiVersion == "v1" && kind == "LimitRangeList")
        || (apiVersion == "v1" && kind == "NamespaceList")
        || (apiVersion == "v1" && kind == "NodeList")
        || (apiVersion == "v1" && kind == "PersistentVolumeClaimList")
        || (apiVersion == "v1" && kind == "PersistentVolumeList")
        || (apiVersion == "v1" && kind == "PodList")
        || (apiVersion == "v1" && kind == "PodTemplateList")
        || (apiVersion == "v1" && kind == "ReplicationControllerList")
        || (apiVersion == "v1" && kind == "ResourceQuotaList")
        || (apiVersion == "v1" && kind == "SecretList")
        || (apiVersion == "v1" && kind == "ServiceAccountList")
        || (apiVersion == "v1" && kind == "ServiceList")
        || (apiVersion == "events.k8s.io/v1beta1" && kind == "EventList")
        || (apiVersion == "extensions/v1beta1" && kind == "DaemonSetList")
        || (apiVersion == "extensions/v1beta1" && kind == "DeploymentList")
        || (apiVersion == "extensions/v1beta1" && kind == "IngressList")
        || (apiVersion == "extensions/v1beta1" && kind == "NetworkPolicyList")
        || (apiVersion == "extensions/v1beta1" && kind == "PodSecurityPolicyList")
        || (apiVersion == "extensions/v1beta1" && kind == "ReplicaSetList")
        || (apiVersion == "networking.k8s.io/v1" && kind == "NetworkPolicyList")
        || (apiVersion == "networking.k8s.io/v1beta1" && kind == "IngressList")
        || (apiVersion == "node.k8s.io/v1alpha1" && kind == "RuntimeClassList")
        || (apiVersion == "node.k8s.io/v1beta1" && kind == "RuntimeClassList")
        || (apiVersion == "policy/v1beta1" && kind == "PodDisruptionBudgetList")
        || (apiVersion == "policy/v1beta1" && kind == "PodSecurityPolicyList")
        || (apiVersion == "rbac.authorization.k8s.io/v1" && kind == "ClusterRoleBindingList")
        || (apiVersion == "rbac.authorization.k8s.io/v1" && kind == "ClusterRoleList")
        || (apiVersion == "rbac.authorization.k8s.io/v1" && kind == "RoleBindingList")
        || (apiVersion == "rbac.authorization.k8s.io/v1" && kind == "RoleList")
        || (apiVersion == "rbac.authorization.k8s.io/v1alpha1" && kind == "ClusterRoleBindingList")
        || (apiVersion == "rbac.authorization.k8s.io/v1alpha1" && kind == "ClusterRoleList")
        || (apiVersion == "rbac.authorization.k8s.io/v1alpha1" && kind == "RoleBindingList")
        || (apiVersion == "rbac.authorization.k8s.io/v1alpha1" && kind == "RoleList")
        || (apiVersion == "rbac.authorization.k8s.io/v1beta1" && kind == "ClusterRoleBindingList")
        || (apiVersion == "rbac.authorization.k8s.io/v1beta1" && kind == "ClusterRoleList")
        || (apiVersion == "rbac.authorization.k8s.io/v1beta1" && kind == "RoleBindingList")
        || (apiVersion == "rbac.authorization.k8s.io/v1beta1" && kind == "RoleList")
        || (apiVersion == "scheduling.k8s.io/v1" && kind == "PriorityClassList")
        || (apiVersion == "scheduling.k8s.io/v1alpha1" && kind == "PriorityClassList")
        || (apiVersion == "scheduling.k8s.io/v1beta1" && kind == "PriorityClassList")
        || (apiVersion == "settings.k8s.io/v1alpha1" && kind == "PodPresetList")
        || (apiVersion == "storage.k8s.io/v1" && kind == "StorageClassList")
        || (apiVersion == "storage.k8s.io/v1" && kind == "VolumeAttachmentList")
        || (apiVersion == "storage.k8s.io/v1alpha1" && kind == "VolumeAttachmentList")
        || (apiVersion == "storage.k8s.io/v1beta1" && kind == "CSIDriverList")
        || (apiVersion == "storage.k8s.io/v1beta1" && kind == "CSINodeList")
        || (apiVersion == "storage.k8s.io/v1beta1" && kind == "StorageClassList")
        || (apiVersion == "storage.k8s.io/v1beta1" && kind == "VolumeAttachmentList")) {
        const objs = [];
        const items = obj["items"] || [];
        for (const item of items) {
            objs.push(...parseYamlObject(item, transformations, resourcePrefix, opts));
        }
        return objs;
    }
    if (!("metadata" in obj) || !("name" in obj["metadata"])) {
        throw new Error(`YAML object does not have a .metadata.name: ${obj.apiVersion}/${obj.kind} ${JSON.stringify(obj.metadata)}`);
    }
    const meta = obj["metadata"];
    let id = pulumi.output(meta["name"]);
    const namespace = meta["namespace"] || undefined;
    if (namespace !== undefined) {
        id = pulumi.concat(namespace, "/", id);
    }
    if (resourcePrefix !== undefined) {
        id = pulumi.concat(resourcePrefix, "-", id);
    }
    switch (`${apiVersion}/${kind}`) {
        case "admissionregistration.k8s.io/v1beta1/MutatingWebhookConfiguration":
            return [id.apply(id => ({
                    name: `admissionregistration.k8s.io/v1beta1/MutatingWebhookConfiguration::${id}`,
                    resource: new k8s.admissionregistration.v1beta1.MutatingWebhookConfiguration(id, obj, opts),
                }))];
        case "admissionregistration.k8s.io/v1beta1/MutatingWebhookConfigurationList":
            return [id.apply(id => ({
                    name: `admissionregistration.k8s.io/v1beta1/MutatingWebhookConfigurationList::${id}`,
                    resource: new k8s.admissionregistration.v1beta1.MutatingWebhookConfigurationList(id, obj, opts),
                }))];
        case "admissionregistration.k8s.io/v1beta1/ValidatingWebhookConfiguration":
            return [id.apply(id => ({
                    name: `admissionregistration.k8s.io/v1beta1/ValidatingWebhookConfiguration::${id}`,
                    resource: new k8s.admissionregistration.v1beta1.ValidatingWebhookConfiguration(id, obj, opts),
                }))];
        case "admissionregistration.k8s.io/v1beta1/ValidatingWebhookConfigurationList":
            return [id.apply(id => ({
                    name: `admissionregistration.k8s.io/v1beta1/ValidatingWebhookConfigurationList::${id}`,
                    resource: new k8s.admissionregistration.v1beta1.ValidatingWebhookConfigurationList(id, obj, opts),
                }))];
        case "apiextensions.k8s.io/v1beta1/CustomResourceDefinition":
            return [id.apply(id => ({
                    name: `apiextensions.k8s.io/v1beta1/CustomResourceDefinition::${id}`,
                    resource: new k8s.apiextensions.v1beta1.CustomResourceDefinition(id, obj, opts),
                }))];
        case "apiextensions.k8s.io/v1beta1/CustomResourceDefinitionList":
            return [id.apply(id => ({
                    name: `apiextensions.k8s.io/v1beta1/CustomResourceDefinitionList::${id}`,
                    resource: new k8s.apiextensions.v1beta1.CustomResourceDefinitionList(id, obj, opts),
                }))];
        case "apiregistration.k8s.io/v1/APIService":
            return [id.apply(id => ({
                    name: `apiregistration.k8s.io/v1/APIService::${id}`,
                    resource: new k8s.apiregistration.v1.APIService(id, obj, opts),
                }))];
        case "apiregistration/v1/APIService":
            return [id.apply(id => ({
                    name: `apiregistration/v1/APIService::${id}`,
                    resource: new k8s.apiregistration.v1.APIService(id, obj, opts),
                }))];
        case "apiregistration.k8s.io/v1/APIServiceList":
            return [id.apply(id => ({
                    name: `apiregistration.k8s.io/v1/APIServiceList::${id}`,
                    resource: new k8s.apiregistration.v1.APIServiceList(id, obj, opts),
                }))];
        case "apiregistration/v1/APIServiceList":
            return [id.apply(id => ({
                    name: `apiregistration/v1/APIServiceList::${id}`,
                    resource: new k8s.apiregistration.v1.APIServiceList(id, obj, opts),
                }))];
        case "apiregistration.k8s.io/v1beta1/APIService":
            return [id.apply(id => ({
                    name: `apiregistration.k8s.io/v1beta1/APIService::${id}`,
                    resource: new k8s.apiregistration.v1beta1.APIService(id, obj, opts),
                }))];
        case "apiregistration/v1beta1/APIService":
            return [id.apply(id => ({
                    name: `apiregistration/v1beta1/APIService::${id}`,
                    resource: new k8s.apiregistration.v1beta1.APIService(id, obj, opts),
                }))];
        case "apiregistration.k8s.io/v1beta1/APIServiceList":
            return [id.apply(id => ({
                    name: `apiregistration.k8s.io/v1beta1/APIServiceList::${id}`,
                    resource: new k8s.apiregistration.v1beta1.APIServiceList(id, obj, opts),
                }))];
        case "apiregistration/v1beta1/APIServiceList":
            return [id.apply(id => ({
                    name: `apiregistration/v1beta1/APIServiceList::${id}`,
                    resource: new k8s.apiregistration.v1beta1.APIServiceList(id, obj, opts),
                }))];
        case "apps/v1/ControllerRevision":
            return [id.apply(id => ({
                    name: `apps/v1/ControllerRevision::${id}`,
                    resource: new k8s.apps.v1.ControllerRevision(id, obj, opts),
                }))];
        case "apps/v1/ControllerRevisionList":
            return [id.apply(id => ({
                    name: `apps/v1/ControllerRevisionList::${id}`,
                    resource: new k8s.apps.v1.ControllerRevisionList(id, obj, opts),
                }))];
        case "apps/v1/DaemonSet":
            return [id.apply(id => ({
                    name: `apps/v1/DaemonSet::${id}`,
                    resource: new k8s.apps.v1.DaemonSet(id, obj, opts),
                }))];
        case "apps/v1/DaemonSetList":
            return [id.apply(id => ({
                    name: `apps/v1/DaemonSetList::${id}`,
                    resource: new k8s.apps.v1.DaemonSetList(id, obj, opts),
                }))];
        case "apps/v1/Deployment":
            return [id.apply(id => ({
                    name: `apps/v1/Deployment::${id}`,
                    resource: new k8s.apps.v1.Deployment(id, obj, opts),
                }))];
        case "apps/v1/DeploymentList":
            return [id.apply(id => ({
                    name: `apps/v1/DeploymentList::${id}`,
                    resource: new k8s.apps.v1.DeploymentList(id, obj, opts),
                }))];
        case "apps/v1/ReplicaSet":
            return [id.apply(id => ({
                    name: `apps/v1/ReplicaSet::${id}`,
                    resource: new k8s.apps.v1.ReplicaSet(id, obj, opts),
                }))];
        case "apps/v1/ReplicaSetList":
            return [id.apply(id => ({
                    name: `apps/v1/ReplicaSetList::${id}`,
                    resource: new k8s.apps.v1.ReplicaSetList(id, obj, opts),
                }))];
        case "apps/v1/StatefulSet":
            return [id.apply(id => ({
                    name: `apps/v1/StatefulSet::${id}`,
                    resource: new k8s.apps.v1.StatefulSet(id, obj, opts),
                }))];
        case "apps/v1/StatefulSetList":
            return [id.apply(id => ({
                    name: `apps/v1/StatefulSetList::${id}`,
                    resource: new k8s.apps.v1.StatefulSetList(id, obj, opts),
                }))];
        case "apps/v1beta1/ControllerRevision":
            return [id.apply(id => ({
                    name: `apps/v1beta1/ControllerRevision::${id}`,
                    resource: new k8s.apps.v1beta1.ControllerRevision(id, obj, opts),
                }))];
        case "apps/v1beta1/ControllerRevisionList":
            return [id.apply(id => ({
                    name: `apps/v1beta1/ControllerRevisionList::${id}`,
                    resource: new k8s.apps.v1beta1.ControllerRevisionList(id, obj, opts),
                }))];
        case "apps/v1beta1/Deployment":
            return [id.apply(id => ({
                    name: `apps/v1beta1/Deployment::${id}`,
                    resource: new k8s.apps.v1beta1.Deployment(id, obj, opts),
                }))];
        case "apps/v1beta1/DeploymentList":
            return [id.apply(id => ({
                    name: `apps/v1beta1/DeploymentList::${id}`,
                    resource: new k8s.apps.v1beta1.DeploymentList(id, obj, opts),
                }))];
        case "apps/v1beta1/StatefulSet":
            return [id.apply(id => ({
                    name: `apps/v1beta1/StatefulSet::${id}`,
                    resource: new k8s.apps.v1beta1.StatefulSet(id, obj, opts),
                }))];
        case "apps/v1beta1/StatefulSetList":
            return [id.apply(id => ({
                    name: `apps/v1beta1/StatefulSetList::${id}`,
                    resource: new k8s.apps.v1beta1.StatefulSetList(id, obj, opts),
                }))];
        case "apps/v1beta2/ControllerRevision":
            return [id.apply(id => ({
                    name: `apps/v1beta2/ControllerRevision::${id}`,
                    resource: new k8s.apps.v1beta2.ControllerRevision(id, obj, opts),
                }))];
        case "apps/v1beta2/ControllerRevisionList":
            return [id.apply(id => ({
                    name: `apps/v1beta2/ControllerRevisionList::${id}`,
                    resource: new k8s.apps.v1beta2.ControllerRevisionList(id, obj, opts),
                }))];
        case "apps/v1beta2/DaemonSet":
            return [id.apply(id => ({
                    name: `apps/v1beta2/DaemonSet::${id}`,
                    resource: new k8s.apps.v1beta2.DaemonSet(id, obj, opts),
                }))];
        case "apps/v1beta2/DaemonSetList":
            return [id.apply(id => ({
                    name: `apps/v1beta2/DaemonSetList::${id}`,
                    resource: new k8s.apps.v1beta2.DaemonSetList(id, obj, opts),
                }))];
        case "apps/v1beta2/Deployment":
            return [id.apply(id => ({
                    name: `apps/v1beta2/Deployment::${id}`,
                    resource: new k8s.apps.v1beta2.Deployment(id, obj, opts),
                }))];
        case "apps/v1beta2/DeploymentList":
            return [id.apply(id => ({
                    name: `apps/v1beta2/DeploymentList::${id}`,
                    resource: new k8s.apps.v1beta2.DeploymentList(id, obj, opts),
                }))];
        case "apps/v1beta2/ReplicaSet":
            return [id.apply(id => ({
                    name: `apps/v1beta2/ReplicaSet::${id}`,
                    resource: new k8s.apps.v1beta2.ReplicaSet(id, obj, opts),
                }))];
        case "apps/v1beta2/ReplicaSetList":
            return [id.apply(id => ({
                    name: `apps/v1beta2/ReplicaSetList::${id}`,
                    resource: new k8s.apps.v1beta2.ReplicaSetList(id, obj, opts),
                }))];
        case "apps/v1beta2/StatefulSet":
            return [id.apply(id => ({
                    name: `apps/v1beta2/StatefulSet::${id}`,
                    resource: new k8s.apps.v1beta2.StatefulSet(id, obj, opts),
                }))];
        case "apps/v1beta2/StatefulSetList":
            return [id.apply(id => ({
                    name: `apps/v1beta2/StatefulSetList::${id}`,
                    resource: new k8s.apps.v1beta2.StatefulSetList(id, obj, opts),
                }))];
        case "auditregistration.k8s.io/v1alpha1/AuditSink":
            return [id.apply(id => ({
                    name: `auditregistration.k8s.io/v1alpha1/AuditSink::${id}`,
                    resource: new k8s.auditregistration.v1alpha1.AuditSink(id, obj, opts),
                }))];
        case "auditregistration.k8s.io/v1alpha1/AuditSinkList":
            return [id.apply(id => ({
                    name: `auditregistration.k8s.io/v1alpha1/AuditSinkList::${id}`,
                    resource: new k8s.auditregistration.v1alpha1.AuditSinkList(id, obj, opts),
                }))];
        case "authentication.k8s.io/v1/TokenReview":
            return [id.apply(id => ({
                    name: `authentication.k8s.io/v1/TokenReview::${id}`,
                    resource: new k8s.authentication.v1.TokenReview(id, obj, opts),
                }))];
        case "authentication.k8s.io/v1beta1/TokenReview":
            return [id.apply(id => ({
                    name: `authentication.k8s.io/v1beta1/TokenReview::${id}`,
                    resource: new k8s.authentication.v1beta1.TokenReview(id, obj, opts),
                }))];
        case "authorization.k8s.io/v1/LocalSubjectAccessReview":
            return [id.apply(id => ({
                    name: `authorization.k8s.io/v1/LocalSubjectAccessReview::${id}`,
                    resource: new k8s.authorization.v1.LocalSubjectAccessReview(id, obj, opts),
                }))];
        case "authorization.k8s.io/v1/SelfSubjectAccessReview":
            return [id.apply(id => ({
                    name: `authorization.k8s.io/v1/SelfSubjectAccessReview::${id}`,
                    resource: new k8s.authorization.v1.SelfSubjectAccessReview(id, obj, opts),
                }))];
        case "authorization.k8s.io/v1/SelfSubjectRulesReview":
            return [id.apply(id => ({
                    name: `authorization.k8s.io/v1/SelfSubjectRulesReview::${id}`,
                    resource: new k8s.authorization.v1.SelfSubjectRulesReview(id, obj, opts),
                }))];
        case "authorization.k8s.io/v1/SubjectAccessReview":
            return [id.apply(id => ({
                    name: `authorization.k8s.io/v1/SubjectAccessReview::${id}`,
                    resource: new k8s.authorization.v1.SubjectAccessReview(id, obj, opts),
                }))];
        case "authorization.k8s.io/v1beta1/LocalSubjectAccessReview":
            return [id.apply(id => ({
                    name: `authorization.k8s.io/v1beta1/LocalSubjectAccessReview::${id}`,
                    resource: new k8s.authorization.v1beta1.LocalSubjectAccessReview(id, obj, opts),
                }))];
        case "authorization.k8s.io/v1beta1/SelfSubjectAccessReview":
            return [id.apply(id => ({
                    name: `authorization.k8s.io/v1beta1/SelfSubjectAccessReview::${id}`,
                    resource: new k8s.authorization.v1beta1.SelfSubjectAccessReview(id, obj, opts),
                }))];
        case "authorization.k8s.io/v1beta1/SelfSubjectRulesReview":
            return [id.apply(id => ({
                    name: `authorization.k8s.io/v1beta1/SelfSubjectRulesReview::${id}`,
                    resource: new k8s.authorization.v1beta1.SelfSubjectRulesReview(id, obj, opts),
                }))];
        case "authorization.k8s.io/v1beta1/SubjectAccessReview":
            return [id.apply(id => ({
                    name: `authorization.k8s.io/v1beta1/SubjectAccessReview::${id}`,
                    resource: new k8s.authorization.v1beta1.SubjectAccessReview(id, obj, opts),
                }))];
        case "autoscaling/v1/HorizontalPodAutoscaler":
            return [id.apply(id => ({
                    name: `autoscaling/v1/HorizontalPodAutoscaler::${id}`,
                    resource: new k8s.autoscaling.v1.HorizontalPodAutoscaler(id, obj, opts),
                }))];
        case "autoscaling/v1/HorizontalPodAutoscalerList":
            return [id.apply(id => ({
                    name: `autoscaling/v1/HorizontalPodAutoscalerList::${id}`,
                    resource: new k8s.autoscaling.v1.HorizontalPodAutoscalerList(id, obj, opts),
                }))];
        case "autoscaling/v2beta1/HorizontalPodAutoscaler":
            return [id.apply(id => ({
                    name: `autoscaling/v2beta1/HorizontalPodAutoscaler::${id}`,
                    resource: new k8s.autoscaling.v2beta1.HorizontalPodAutoscaler(id, obj, opts),
                }))];
        case "autoscaling/v2beta1/HorizontalPodAutoscalerList":
            return [id.apply(id => ({
                    name: `autoscaling/v2beta1/HorizontalPodAutoscalerList::${id}`,
                    resource: new k8s.autoscaling.v2beta1.HorizontalPodAutoscalerList(id, obj, opts),
                }))];
        case "autoscaling/v2beta2/HorizontalPodAutoscaler":
            return [id.apply(id => ({
                    name: `autoscaling/v2beta2/HorizontalPodAutoscaler::${id}`,
                    resource: new k8s.autoscaling.v2beta2.HorizontalPodAutoscaler(id, obj, opts),
                }))];
        case "autoscaling/v2beta2/HorizontalPodAutoscalerList":
            return [id.apply(id => ({
                    name: `autoscaling/v2beta2/HorizontalPodAutoscalerList::${id}`,
                    resource: new k8s.autoscaling.v2beta2.HorizontalPodAutoscalerList(id, obj, opts),
                }))];
        case "batch/v1/Job":
            return [id.apply(id => ({
                    name: `batch/v1/Job::${id}`,
                    resource: new k8s.batch.v1.Job(id, obj, opts),
                }))];
        case "batch/v1/JobList":
            return [id.apply(id => ({
                    name: `batch/v1/JobList::${id}`,
                    resource: new k8s.batch.v1.JobList(id, obj, opts),
                }))];
        case "batch/v1beta1/CronJob":
            return [id.apply(id => ({
                    name: `batch/v1beta1/CronJob::${id}`,
                    resource: new k8s.batch.v1beta1.CronJob(id, obj, opts),
                }))];
        case "batch/v1beta1/CronJobList":
            return [id.apply(id => ({
                    name: `batch/v1beta1/CronJobList::${id}`,
                    resource: new k8s.batch.v1beta1.CronJobList(id, obj, opts),
                }))];
        case "batch/v2alpha1/CronJob":
            return [id.apply(id => ({
                    name: `batch/v2alpha1/CronJob::${id}`,
                    resource: new k8s.batch.v2alpha1.CronJob(id, obj, opts),
                }))];
        case "batch/v2alpha1/CronJobList":
            return [id.apply(id => ({
                    name: `batch/v2alpha1/CronJobList::${id}`,
                    resource: new k8s.batch.v2alpha1.CronJobList(id, obj, opts),
                }))];
        case "certificates.k8s.io/v1beta1/CertificateSigningRequest":
            return [id.apply(id => ({
                    name: `certificates.k8s.io/v1beta1/CertificateSigningRequest::${id}`,
                    resource: new k8s.certificates.v1beta1.CertificateSigningRequest(id, obj, opts),
                }))];
        case "certificates.k8s.io/v1beta1/CertificateSigningRequestList":
            return [id.apply(id => ({
                    name: `certificates.k8s.io/v1beta1/CertificateSigningRequestList::${id}`,
                    resource: new k8s.certificates.v1beta1.CertificateSigningRequestList(id, obj, opts),
                }))];
        case "coordination.k8s.io/v1/Lease":
            return [id.apply(id => ({
                    name: `coordination.k8s.io/v1/Lease::${id}`,
                    resource: new k8s.coordination.v1.Lease(id, obj, opts),
                }))];
        case "coordination.k8s.io/v1/LeaseList":
            return [id.apply(id => ({
                    name: `coordination.k8s.io/v1/LeaseList::${id}`,
                    resource: new k8s.coordination.v1.LeaseList(id, obj, opts),
                }))];
        case "coordination.k8s.io/v1beta1/Lease":
            return [id.apply(id => ({
                    name: `coordination.k8s.io/v1beta1/Lease::${id}`,
                    resource: new k8s.coordination.v1beta1.Lease(id, obj, opts),
                }))];
        case "coordination.k8s.io/v1beta1/LeaseList":
            return [id.apply(id => ({
                    name: `coordination.k8s.io/v1beta1/LeaseList::${id}`,
                    resource: new k8s.coordination.v1beta1.LeaseList(id, obj, opts),
                }))];
        case "v1/Binding":
            return [id.apply(id => ({
                    name: `v1/Binding::${id}`,
                    resource: new k8s.core.v1.Binding(id, obj, opts),
                }))];
        case "v1/ComponentStatus":
            return [id.apply(id => ({
                    name: `v1/ComponentStatus::${id}`,
                    resource: new k8s.core.v1.ComponentStatus(id, obj, opts),
                }))];
        case "v1/ComponentStatusList":
            return [id.apply(id => ({
                    name: `v1/ComponentStatusList::${id}`,
                    resource: new k8s.core.v1.ComponentStatusList(id, obj, opts),
                }))];
        case "v1/ConfigMap":
            return [id.apply(id => ({
                    name: `v1/ConfigMap::${id}`,
                    resource: new k8s.core.v1.ConfigMap(id, obj, opts),
                }))];
        case "v1/ConfigMapList":
            return [id.apply(id => ({
                    name: `v1/ConfigMapList::${id}`,
                    resource: new k8s.core.v1.ConfigMapList(id, obj, opts),
                }))];
        case "v1/Endpoints":
            return [id.apply(id => ({
                    name: `v1/Endpoints::${id}`,
                    resource: new k8s.core.v1.Endpoints(id, obj, opts),
                }))];
        case "v1/EndpointsList":
            return [id.apply(id => ({
                    name: `v1/EndpointsList::${id}`,
                    resource: new k8s.core.v1.EndpointsList(id, obj, opts),
                }))];
        case "v1/Event":
            return [id.apply(id => ({
                    name: `v1/Event::${id}`,
                    resource: new k8s.core.v1.Event(id, obj, opts),
                }))];
        case "v1/EventList":
            return [id.apply(id => ({
                    name: `v1/EventList::${id}`,
                    resource: new k8s.core.v1.EventList(id, obj, opts),
                }))];
        case "v1/LimitRange":
            return [id.apply(id => ({
                    name: `v1/LimitRange::${id}`,
                    resource: new k8s.core.v1.LimitRange(id, obj, opts),
                }))];
        case "v1/LimitRangeList":
            return [id.apply(id => ({
                    name: `v1/LimitRangeList::${id}`,
                    resource: new k8s.core.v1.LimitRangeList(id, obj, opts),
                }))];
        case "v1/Namespace":
            return [id.apply(id => ({
                    name: `v1/Namespace::${id}`,
                    resource: new k8s.core.v1.Namespace(id, obj, opts),
                }))];
        case "v1/NamespaceList":
            return [id.apply(id => ({
                    name: `v1/NamespaceList::${id}`,
                    resource: new k8s.core.v1.NamespaceList(id, obj, opts),
                }))];
        case "v1/Node":
            return [id.apply(id => ({
                    name: `v1/Node::${id}`,
                    resource: new k8s.core.v1.Node(id, obj, opts),
                }))];
        case "v1/NodeList":
            return [id.apply(id => ({
                    name: `v1/NodeList::${id}`,
                    resource: new k8s.core.v1.NodeList(id, obj, opts),
                }))];
        case "v1/PersistentVolume":
            return [id.apply(id => ({
                    name: `v1/PersistentVolume::${id}`,
                    resource: new k8s.core.v1.PersistentVolume(id, obj, opts),
                }))];
        case "v1/PersistentVolumeClaim":
            return [id.apply(id => ({
                    name: `v1/PersistentVolumeClaim::${id}`,
                    resource: new k8s.core.v1.PersistentVolumeClaim(id, obj, opts),
                }))];
        case "v1/PersistentVolumeClaimList":
            return [id.apply(id => ({
                    name: `v1/PersistentVolumeClaimList::${id}`,
                    resource: new k8s.core.v1.PersistentVolumeClaimList(id, obj, opts),
                }))];
        case "v1/PersistentVolumeList":
            return [id.apply(id => ({
                    name: `v1/PersistentVolumeList::${id}`,
                    resource: new k8s.core.v1.PersistentVolumeList(id, obj, opts),
                }))];
        case "v1/Pod":
            return [id.apply(id => ({
                    name: `v1/Pod::${id}`,
                    resource: new k8s.core.v1.Pod(id, obj, opts),
                }))];
        case "v1/PodList":
            return [id.apply(id => ({
                    name: `v1/PodList::${id}`,
                    resource: new k8s.core.v1.PodList(id, obj, opts),
                }))];
        case "v1/PodTemplate":
            return [id.apply(id => ({
                    name: `v1/PodTemplate::${id}`,
                    resource: new k8s.core.v1.PodTemplate(id, obj, opts),
                }))];
        case "v1/PodTemplateList":
            return [id.apply(id => ({
                    name: `v1/PodTemplateList::${id}`,
                    resource: new k8s.core.v1.PodTemplateList(id, obj, opts),
                }))];
        case "v1/ReplicationController":
            return [id.apply(id => ({
                    name: `v1/ReplicationController::${id}`,
                    resource: new k8s.core.v1.ReplicationController(id, obj, opts),
                }))];
        case "v1/ReplicationControllerList":
            return [id.apply(id => ({
                    name: `v1/ReplicationControllerList::${id}`,
                    resource: new k8s.core.v1.ReplicationControllerList(id, obj, opts),
                }))];
        case "v1/ResourceQuota":
            return [id.apply(id => ({
                    name: `v1/ResourceQuota::${id}`,
                    resource: new k8s.core.v1.ResourceQuota(id, obj, opts),
                }))];
        case "v1/ResourceQuotaList":
            return [id.apply(id => ({
                    name: `v1/ResourceQuotaList::${id}`,
                    resource: new k8s.core.v1.ResourceQuotaList(id, obj, opts),
                }))];
        case "v1/Secret":
            return [id.apply(id => ({
                    name: `v1/Secret::${id}`,
                    resource: new k8s.core.v1.Secret(id, obj, opts),
                }))];
        case "v1/SecretList":
            return [id.apply(id => ({
                    name: `v1/SecretList::${id}`,
                    resource: new k8s.core.v1.SecretList(id, obj, opts),
                }))];
        case "v1/Service":
            return [id.apply(id => ({
                    name: `v1/Service::${id}`,
                    resource: new k8s.core.v1.Service(id, obj, opts),
                }))];
        case "v1/ServiceAccount":
            return [id.apply(id => ({
                    name: `v1/ServiceAccount::${id}`,
                    resource: new k8s.core.v1.ServiceAccount(id, obj, opts),
                }))];
        case "v1/ServiceAccountList":
            return [id.apply(id => ({
                    name: `v1/ServiceAccountList::${id}`,
                    resource: new k8s.core.v1.ServiceAccountList(id, obj, opts),
                }))];
        case "v1/ServiceList":
            return [id.apply(id => ({
                    name: `v1/ServiceList::${id}`,
                    resource: new k8s.core.v1.ServiceList(id, obj, opts),
                }))];
        case "events.k8s.io/v1beta1/Event":
            return [id.apply(id => ({
                    name: `events.k8s.io/v1beta1/Event::${id}`,
                    resource: new k8s.events.v1beta1.Event(id, obj, opts),
                }))];
        case "events.k8s.io/v1beta1/EventList":
            return [id.apply(id => ({
                    name: `events.k8s.io/v1beta1/EventList::${id}`,
                    resource: new k8s.events.v1beta1.EventList(id, obj, opts),
                }))];
        case "extensions/v1beta1/DaemonSet":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/DaemonSet::${id}`,
                    resource: new k8s.extensions.v1beta1.DaemonSet(id, obj, opts),
                }))];
        case "extensions/v1beta1/DaemonSetList":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/DaemonSetList::${id}`,
                    resource: new k8s.extensions.v1beta1.DaemonSetList(id, obj, opts),
                }))];
        case "extensions/v1beta1/Deployment":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/Deployment::${id}`,
                    resource: new k8s.extensions.v1beta1.Deployment(id, obj, opts),
                }))];
        case "extensions/v1beta1/DeploymentList":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/DeploymentList::${id}`,
                    resource: new k8s.extensions.v1beta1.DeploymentList(id, obj, opts),
                }))];
        case "extensions/v1beta1/Ingress":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/Ingress::${id}`,
                    resource: new k8s.extensions.v1beta1.Ingress(id, obj, opts),
                }))];
        case "extensions/v1beta1/IngressList":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/IngressList::${id}`,
                    resource: new k8s.extensions.v1beta1.IngressList(id, obj, opts),
                }))];
        case "extensions/v1beta1/NetworkPolicy":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/NetworkPolicy::${id}`,
                    resource: new k8s.extensions.v1beta1.NetworkPolicy(id, obj, opts),
                }))];
        case "extensions/v1beta1/NetworkPolicyList":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/NetworkPolicyList::${id}`,
                    resource: new k8s.extensions.v1beta1.NetworkPolicyList(id, obj, opts),
                }))];
        case "extensions/v1beta1/PodSecurityPolicy":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/PodSecurityPolicy::${id}`,
                    resource: new k8s.extensions.v1beta1.PodSecurityPolicy(id, obj, opts),
                }))];
        case "extensions/v1beta1/PodSecurityPolicyList":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/PodSecurityPolicyList::${id}`,
                    resource: new k8s.extensions.v1beta1.PodSecurityPolicyList(id, obj, opts),
                }))];
        case "extensions/v1beta1/ReplicaSet":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/ReplicaSet::${id}`,
                    resource: new k8s.extensions.v1beta1.ReplicaSet(id, obj, opts),
                }))];
        case "extensions/v1beta1/ReplicaSetList":
            return [id.apply(id => ({
                    name: `extensions/v1beta1/ReplicaSetList::${id}`,
                    resource: new k8s.extensions.v1beta1.ReplicaSetList(id, obj, opts),
                }))];
        case "v1/Status":
            return [id.apply(id => ({
                    name: `v1/Status::${id}`,
                    resource: new k8s.meta.v1.Status(id, obj, opts),
                }))];
        case "networking.k8s.io/v1/NetworkPolicy":
            return [id.apply(id => ({
                    name: `networking.k8s.io/v1/NetworkPolicy::${id}`,
                    resource: new k8s.networking.v1.NetworkPolicy(id, obj, opts),
                }))];
        case "networking.k8s.io/v1/NetworkPolicyList":
            return [id.apply(id => ({
                    name: `networking.k8s.io/v1/NetworkPolicyList::${id}`,
                    resource: new k8s.networking.v1.NetworkPolicyList(id, obj, opts),
                }))];
        case "networking.k8s.io/v1beta1/Ingress":
            return [id.apply(id => ({
                    name: `networking.k8s.io/v1beta1/Ingress::${id}`,
                    resource: new k8s.networking.v1beta1.Ingress(id, obj, opts),
                }))];
        case "networking.k8s.io/v1beta1/IngressList":
            return [id.apply(id => ({
                    name: `networking.k8s.io/v1beta1/IngressList::${id}`,
                    resource: new k8s.networking.v1beta1.IngressList(id, obj, opts),
                }))];
        case "node.k8s.io/v1alpha1/RuntimeClass":
            return [id.apply(id => ({
                    name: `node.k8s.io/v1alpha1/RuntimeClass::${id}`,
                    resource: new k8s.node.v1alpha1.RuntimeClass(id, obj, opts),
                }))];
        case "node.k8s.io/v1alpha1/RuntimeClassList":
            return [id.apply(id => ({
                    name: `node.k8s.io/v1alpha1/RuntimeClassList::${id}`,
                    resource: new k8s.node.v1alpha1.RuntimeClassList(id, obj, opts),
                }))];
        case "node.k8s.io/v1beta1/RuntimeClass":
            return [id.apply(id => ({
                    name: `node.k8s.io/v1beta1/RuntimeClass::${id}`,
                    resource: new k8s.node.v1beta1.RuntimeClass(id, obj, opts),
                }))];
        case "node.k8s.io/v1beta1/RuntimeClassList":
            return [id.apply(id => ({
                    name: `node.k8s.io/v1beta1/RuntimeClassList::${id}`,
                    resource: new k8s.node.v1beta1.RuntimeClassList(id, obj, opts),
                }))];
        case "policy/v1beta1/PodDisruptionBudget":
            return [id.apply(id => ({
                    name: `policy/v1beta1/PodDisruptionBudget::${id}`,
                    resource: new k8s.policy.v1beta1.PodDisruptionBudget(id, obj, opts),
                }))];
        case "policy/v1beta1/PodDisruptionBudgetList":
            return [id.apply(id => ({
                    name: `policy/v1beta1/PodDisruptionBudgetList::${id}`,
                    resource: new k8s.policy.v1beta1.PodDisruptionBudgetList(id, obj, opts),
                }))];
        case "policy/v1beta1/PodSecurityPolicy":
            return [id.apply(id => ({
                    name: `policy/v1beta1/PodSecurityPolicy::${id}`,
                    resource: new k8s.policy.v1beta1.PodSecurityPolicy(id, obj, opts),
                }))];
        case "policy/v1beta1/PodSecurityPolicyList":
            return [id.apply(id => ({
                    name: `policy/v1beta1/PodSecurityPolicyList::${id}`,
                    resource: new k8s.policy.v1beta1.PodSecurityPolicyList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1/ClusterRole":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1/ClusterRole::${id}`,
                    resource: new k8s.rbac.v1.ClusterRole(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1/ClusterRoleBinding":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1/ClusterRoleBinding::${id}`,
                    resource: new k8s.rbac.v1.ClusterRoleBinding(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1/ClusterRoleBindingList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1/ClusterRoleBindingList::${id}`,
                    resource: new k8s.rbac.v1.ClusterRoleBindingList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1/ClusterRoleList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1/ClusterRoleList::${id}`,
                    resource: new k8s.rbac.v1.ClusterRoleList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1/Role":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1/Role::${id}`,
                    resource: new k8s.rbac.v1.Role(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1/RoleBinding":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1/RoleBinding::${id}`,
                    resource: new k8s.rbac.v1.RoleBinding(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1/RoleBindingList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1/RoleBindingList::${id}`,
                    resource: new k8s.rbac.v1.RoleBindingList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1/RoleList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1/RoleList::${id}`,
                    resource: new k8s.rbac.v1.RoleList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1alpha1/ClusterRole":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1alpha1/ClusterRole::${id}`,
                    resource: new k8s.rbac.v1alpha1.ClusterRole(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1alpha1/ClusterRoleBinding":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1alpha1/ClusterRoleBinding::${id}`,
                    resource: new k8s.rbac.v1alpha1.ClusterRoleBinding(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1alpha1/ClusterRoleBindingList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1alpha1/ClusterRoleBindingList::${id}`,
                    resource: new k8s.rbac.v1alpha1.ClusterRoleBindingList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1alpha1/ClusterRoleList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1alpha1/ClusterRoleList::${id}`,
                    resource: new k8s.rbac.v1alpha1.ClusterRoleList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1alpha1/Role":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1alpha1/Role::${id}`,
                    resource: new k8s.rbac.v1alpha1.Role(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1alpha1/RoleBinding":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1alpha1/RoleBinding::${id}`,
                    resource: new k8s.rbac.v1alpha1.RoleBinding(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1alpha1/RoleBindingList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1alpha1/RoleBindingList::${id}`,
                    resource: new k8s.rbac.v1alpha1.RoleBindingList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1alpha1/RoleList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1alpha1/RoleList::${id}`,
                    resource: new k8s.rbac.v1alpha1.RoleList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1beta1/ClusterRole":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1beta1/ClusterRole::${id}`,
                    resource: new k8s.rbac.v1beta1.ClusterRole(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1beta1/ClusterRoleBinding":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1beta1/ClusterRoleBinding::${id}`,
                    resource: new k8s.rbac.v1beta1.ClusterRoleBinding(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1beta1/ClusterRoleBindingList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1beta1/ClusterRoleBindingList::${id}`,
                    resource: new k8s.rbac.v1beta1.ClusterRoleBindingList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1beta1/ClusterRoleList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1beta1/ClusterRoleList::${id}`,
                    resource: new k8s.rbac.v1beta1.ClusterRoleList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1beta1/Role":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1beta1/Role::${id}`,
                    resource: new k8s.rbac.v1beta1.Role(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1beta1/RoleBinding":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1beta1/RoleBinding::${id}`,
                    resource: new k8s.rbac.v1beta1.RoleBinding(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1beta1/RoleBindingList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1beta1/RoleBindingList::${id}`,
                    resource: new k8s.rbac.v1beta1.RoleBindingList(id, obj, opts),
                }))];
        case "rbac.authorization.k8s.io/v1beta1/RoleList":
            return [id.apply(id => ({
                    name: `rbac.authorization.k8s.io/v1beta1/RoleList::${id}`,
                    resource: new k8s.rbac.v1beta1.RoleList(id, obj, opts),
                }))];
        case "scheduling.k8s.io/v1/PriorityClass":
            return [id.apply(id => ({
                    name: `scheduling.k8s.io/v1/PriorityClass::${id}`,
                    resource: new k8s.scheduling.v1.PriorityClass(id, obj, opts),
                }))];
        case "scheduling.k8s.io/v1/PriorityClassList":
            return [id.apply(id => ({
                    name: `scheduling.k8s.io/v1/PriorityClassList::${id}`,
                    resource: new k8s.scheduling.v1.PriorityClassList(id, obj, opts),
                }))];
        case "scheduling.k8s.io/v1alpha1/PriorityClass":
            return [id.apply(id => ({
                    name: `scheduling.k8s.io/v1alpha1/PriorityClass::${id}`,
                    resource: new k8s.scheduling.v1alpha1.PriorityClass(id, obj, opts),
                }))];
        case "scheduling.k8s.io/v1alpha1/PriorityClassList":
            return [id.apply(id => ({
                    name: `scheduling.k8s.io/v1alpha1/PriorityClassList::${id}`,
                    resource: new k8s.scheduling.v1alpha1.PriorityClassList(id, obj, opts),
                }))];
        case "scheduling.k8s.io/v1beta1/PriorityClass":
            return [id.apply(id => ({
                    name: `scheduling.k8s.io/v1beta1/PriorityClass::${id}`,
                    resource: new k8s.scheduling.v1beta1.PriorityClass(id, obj, opts),
                }))];
        case "scheduling.k8s.io/v1beta1/PriorityClassList":
            return [id.apply(id => ({
                    name: `scheduling.k8s.io/v1beta1/PriorityClassList::${id}`,
                    resource: new k8s.scheduling.v1beta1.PriorityClassList(id, obj, opts),
                }))];
        case "settings.k8s.io/v1alpha1/PodPreset":
            return [id.apply(id => ({
                    name: `settings.k8s.io/v1alpha1/PodPreset::${id}`,
                    resource: new k8s.settings.v1alpha1.PodPreset(id, obj, opts),
                }))];
        case "settings.k8s.io/v1alpha1/PodPresetList":
            return [id.apply(id => ({
                    name: `settings.k8s.io/v1alpha1/PodPresetList::${id}`,
                    resource: new k8s.settings.v1alpha1.PodPresetList(id, obj, opts),
                }))];
        case "storage.k8s.io/v1/StorageClass":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1/StorageClass::${id}`,
                    resource: new k8s.storage.v1.StorageClass(id, obj, opts),
                }))];
        case "storage.k8s.io/v1/StorageClassList":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1/StorageClassList::${id}`,
                    resource: new k8s.storage.v1.StorageClassList(id, obj, opts),
                }))];
        case "storage.k8s.io/v1/VolumeAttachment":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1/VolumeAttachment::${id}`,
                    resource: new k8s.storage.v1.VolumeAttachment(id, obj, opts),
                }))];
        case "storage.k8s.io/v1/VolumeAttachmentList":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1/VolumeAttachmentList::${id}`,
                    resource: new k8s.storage.v1.VolumeAttachmentList(id, obj, opts),
                }))];
        case "storage.k8s.io/v1alpha1/VolumeAttachment":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1alpha1/VolumeAttachment::${id}`,
                    resource: new k8s.storage.v1alpha1.VolumeAttachment(id, obj, opts),
                }))];
        case "storage.k8s.io/v1alpha1/VolumeAttachmentList":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1alpha1/VolumeAttachmentList::${id}`,
                    resource: new k8s.storage.v1alpha1.VolumeAttachmentList(id, obj, opts),
                }))];
        case "storage.k8s.io/v1beta1/CSIDriver":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1beta1/CSIDriver::${id}`,
                    resource: new k8s.storage.v1beta1.CSIDriver(id, obj, opts),
                }))];
        case "storage.k8s.io/v1beta1/CSIDriverList":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1beta1/CSIDriverList::${id}`,
                    resource: new k8s.storage.v1beta1.CSIDriverList(id, obj, opts),
                }))];
        case "storage.k8s.io/v1beta1/CSINode":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1beta1/CSINode::${id}`,
                    resource: new k8s.storage.v1beta1.CSINode(id, obj, opts),
                }))];
        case "storage.k8s.io/v1beta1/CSINodeList":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1beta1/CSINodeList::${id}`,
                    resource: new k8s.storage.v1beta1.CSINodeList(id, obj, opts),
                }))];
        case "storage.k8s.io/v1beta1/StorageClass":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1beta1/StorageClass::${id}`,
                    resource: new k8s.storage.v1beta1.StorageClass(id, obj, opts),
                }))];
        case "storage.k8s.io/v1beta1/StorageClassList":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1beta1/StorageClassList::${id}`,
                    resource: new k8s.storage.v1beta1.StorageClassList(id, obj, opts),
                }))];
        case "storage.k8s.io/v1beta1/VolumeAttachment":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1beta1/VolumeAttachment::${id}`,
                    resource: new k8s.storage.v1beta1.VolumeAttachment(id, obj, opts),
                }))];
        case "storage.k8s.io/v1beta1/VolumeAttachmentList":
            return [id.apply(id => ({
                    name: `storage.k8s.io/v1beta1/VolumeAttachmentList::${id}`,
                    resource: new k8s.storage.v1beta1.VolumeAttachmentList(id, obj, opts),
                }))];
        default:
            return [id.apply(id => ({
                    name: `${apiVersion}/${kind}::${id}`,
                    resource: new k8s.apiextensions.CustomResource(id, obj, opts),
                }))];
    }
}
